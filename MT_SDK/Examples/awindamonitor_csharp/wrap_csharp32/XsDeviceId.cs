
//  ==> COPYRIGHT (C) 2019 XSENS TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE <==
//  WARNING: COPYRIGHT (C) 2019 XSENS TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE. ALL RIGHTS RESERVED.
//  THIS FILE AND THE SOURCE CODE IT CONTAINS (AND/OR THE BINARY CODE FILES FOUND IN THE SAME
//  FOLDER THAT CONTAINS THIS FILE) AND ALL RELATED SOFTWARE (COLLECTIVELY, "CODE") ARE SUBJECT
//  TO AN END USER LICENSE AGREEMENT ("AGREEMENT") BETWEEN XSENS AS LICENSOR AND THE AUTHORIZED
//  LICENSEE UNDER THE AGREEMENT. THE CODE MUST BE USED SOLELY WITH XSENS PRODUCTS INCORPORATED
//  INTO LICENSEE PRODUCTS IN ACCORDANCE WITH THE AGREEMENT. ANY USE, MODIFICATION, COPYING OR
//  DISTRIBUTION OF THE CODE IS STRICTLY PROHIBITED UNLESS EXPRESSLY AUTHORIZED BY THE AGREEMENT.
//  IF YOU ARE NOT AN AUTHORIZED USER OF THE CODE IN ACCORDANCE WITH THE AGREEMENT, YOU MUST STOP
//  USING OR VIEWING THE CODE NOW, REMOVE ANY COPIES OF THE CODE FROM YOUR COMPUTER AND NOTIFY
//  XSENS IMMEDIATELY BY EMAIL TO INFO@XSENS.COM. ANY COPIES OR DERIVATIVES OF THE CODE (IN WHOLE
//  OR IN PART) IN SOURCE CODE FORM THAT ARE PERMITTED BY THE AGREEMENT MUST RETAIN THE ABOVE
//  COPYRIGHT NOTICE AND THIS PARAGRAPH IN ITS ENTIRETY, AS REQUIRED BY THE AGREEMENT.
//  
//  THIS SOFTWARE CAN CONTAIN OPEN SOURCE COMPONENTS WHICH CAN BE SUBJECT TO 
//  THE FOLLOWING GENERAL PUBLIC LICENSES:
//  ==> Qt GNU LGPL version 3: http://doc.qt.io/qt-5/lgpl.html <==
//  ==> LAPACK BSD License:  http://www.netlib.org/lapack/LICENSE.txt <==
//  ==> StackWalker 3-Clause BSD License: https://github.com/JochenKalmbach/StackWalker/blob/master/LICENSE <==
//  ==> Icon Creative Commons 3.0: https://creativecommons.org/licenses/by/3.0/legalcode <==
//  

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XDA {

public class XsDeviceId : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsDeviceId(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XsDeviceId obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsDeviceId() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsDeviceId(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public XsDeviceId(string productCode, ushort hardwareVersion, uint productVariant, ulong serialNumber) : this(xsensdeviceapiPINVOKE.new_XsDeviceId__SWIG_0(productCode, hardwareVersion, productVariant, serialNumber), true) {
  }

  public XsDeviceId(ulong serialNumber) : this(xsensdeviceapiPINVOKE.new_XsDeviceId__SWIG_1(serialNumber), true) {
  }

  public XsDeviceId() : this(xsensdeviceapiPINVOKE.new_XsDeviceId__SWIG_2(), true) {
  }

  public XsDeviceId(XsDeviceId other) : this(xsensdeviceapiPINVOKE.new_XsDeviceId__SWIG_3(XsDeviceId.getCPtr(other)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ulong legacyBit() {
    ulong ret = xsensdeviceapiPINVOKE.XsDeviceId_legacyBit();
    return ret;
  }

  public bool isLegacyDeviceId() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isLegacyDeviceId(swigCPtr);
    return ret;
  }

  public ulong toInt() {
    ulong ret = xsensdeviceapiPINVOKE.XsDeviceId_toInt(swigCPtr);
    return ret;
  }

  public XsString productCode() {
    XsString ret = new XsString(xsensdeviceapiPINVOKE.XsDeviceId_productCode(swigCPtr), true);
    return ret;
  }

  public uint productVariant() {
    uint ret = xsensdeviceapiPINVOKE.XsDeviceId_productVariant(swigCPtr);
    return ret;
  }

  public ushort hardwareVersion() {
    ushort ret = xsensdeviceapiPINVOKE.XsDeviceId_hardwareVersion(swigCPtr);
    return ret;
  }

  public uint legacyDeviceId() {
    uint ret = xsensdeviceapiPINVOKE.XsDeviceId_legacyDeviceId(swigCPtr);
    return ret;
  }

  public bool isMtiX() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtiX(swigCPtr);
    return ret;
  }

  public bool isMtiX0() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtiX0(swigCPtr);
    return ret;
  }

  public bool isMtiX00() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtiX00(swigCPtr);
    return ret;
  }

  public bool isMtigX00() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtigX00(swigCPtr);
    return ret;
  }

  public bool isMtigX10() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtigX10(swigCPtr);
    return ret;
  }

  public bool isMti6X0() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMti6X0(swigCPtr);
    return ret;
  }

  public bool isGlove() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isGlove(swigCPtr);
    return ret;
  }

  public bool isMtw() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtw(swigCPtr);
    return ret;
  }

  public bool isMtw2() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtw2(swigCPtr);
    return ret;
  }

  public bool isMtx() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtx(swigCPtr);
    return ret;
  }

  public bool isMtx2() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtx2(swigCPtr);
    return ret;
  }

  public bool isBodyPack() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isBodyPack(swigCPtr);
    return ret;
  }

  public bool isWirelessMaster() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isWirelessMaster(swigCPtr);
    return ret;
  }

  public bool isAwindaX() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isAwindaX(swigCPtr);
    return ret;
  }

  public bool isAwindaXStation() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isAwindaXStation(swigCPtr);
    return ret;
  }

  public bool isAwindaXDongle() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isAwindaXDongle(swigCPtr);
    return ret;
  }

  public bool isAwindaXOem() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isAwindaXOem(swigCPtr);
    return ret;
  }

  public bool isAwinda2() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isAwinda2(swigCPtr);
    return ret;
  }

  public bool isAwinda2Station() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isAwinda2Station(swigCPtr);
    return ret;
  }

  public bool isAwinda2Dongle() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isAwinda2Dongle(swigCPtr);
    return ret;
  }

  public bool isAwinda2Oem() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isAwinda2Oem(swigCPtr);
    return ret;
  }

  public bool isSyncStationX() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isSyncStationX(swigCPtr);
    return ret;
  }

  public bool isSyncStation2() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isSyncStation2(swigCPtr);
    return ret;
  }

  public bool isHilDevice() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isHilDevice(swigCPtr);
    return ret;
  }

  public bool isImu() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isImu(swigCPtr);
    return ret;
  }

  public bool isVru() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isVru(swigCPtr);
    return ret;
  }

  public bool isAhrs() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isAhrs(swigCPtr);
    return ret;
  }

  public bool isGnss() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isGnss(swigCPtr);
    return ret;
  }

  public bool isContainerDevice() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isContainerDevice(swigCPtr);
    return ret;
  }

  public bool isMt() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMt(swigCPtr);
    return ret;
  }

  public bool isMti() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMti(swigCPtr);
    return ret;
  }

  public bool isMtig() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtig(swigCPtr);
    return ret;
  }

  public bool isMtMark4() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMark4(swigCPtr);
    return ret;
  }

  public bool isMtMark5() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMark5(swigCPtr);
    return ret;
  }

  public XsString toXsString() {
    XsString ret = new XsString(xsensdeviceapiPINVOKE.XsDeviceId_toXsString(swigCPtr), true);
    return ret;
  }

  public void fromString(XsString str) {
    xsensdeviceapiPINVOKE.XsDeviceId_fromString(swigCPtr, XsString.getCPtr(str));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsString toDeviceTypeString(bool makeType) {
    XsString ret = new XsString(xsensdeviceapiPINVOKE.XsDeviceId_toDeviceTypeString__SWIG_0(swigCPtr, makeType), true);
    return ret;
  }

  public XsString toDeviceTypeString() {
    XsString ret = new XsString(xsensdeviceapiPINVOKE.XsDeviceId_toDeviceTypeString__SWIG_1(swigCPtr), true);
    return ret;
  }

  public void fromDeviceTypeString(XsString str) {
    xsensdeviceapiPINVOKE.XsDeviceId_fromDeviceTypeString(swigCPtr, XsString.getCPtr(str));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isValid() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isValid(swigCPtr);
    return ret;
  }

  public bool contains(XsDeviceId other) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_contains(swigCPtr, XsDeviceId.getCPtr(other));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isType() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isType(swigCPtr);
    return ret;
  }

  public XsString typeName() {
    XsString ret = new XsString(xsensdeviceapiPINVOKE.XsDeviceId_typeName(swigCPtr), true);
    return ret;
  }

  public XsDeviceId type() {
    XsDeviceId ret = new XsDeviceId(xsensdeviceapiPINVOKE.XsDeviceId_type(swigCPtr), true);
    return ret;
  }

  public XsDeviceId deviceType(bool detailed) {
    XsDeviceId ret = new XsDeviceId(xsensdeviceapiPINVOKE.XsDeviceId_deviceType__SWIG_0(swigCPtr, detailed), true);
    return ret;
  }

  public XsDeviceId deviceType() {
    XsDeviceId ret = new XsDeviceId(xsensdeviceapiPINVOKE.XsDeviceId_deviceType__SWIG_1(swigCPtr), true);
    return ret;
  }

  public XsDeviceId deviceTypeMask(bool detailed) {
    XsDeviceId ret = new XsDeviceId(xsensdeviceapiPINVOKE.XsDeviceId_deviceTypeMask__SWIG_0(swigCPtr, detailed), true);
    return ret;
  }

  public XsDeviceId deviceTypeMask() {
    XsDeviceId ret = new XsDeviceId(xsensdeviceapiPINVOKE.XsDeviceId_deviceTypeMask__SWIG_1(swigCPtr), true);
    return ret;
  }

  public bool isMtMk4() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk4(swigCPtr);
    return ret;
  }

  public bool isMtMk4_X() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk4_X(swigCPtr);
    return ret;
  }

  public bool isMtMk4_1() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk4_1(swigCPtr);
    return ret;
  }

  public bool isMtMk4_2() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk4_2(swigCPtr);
    return ret;
  }

  public bool isMtMk4_3() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk4_3(swigCPtr);
    return ret;
  }

  public bool isMtMk4_7() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk4_7(swigCPtr);
    return ret;
  }

  public bool isMtMk4_X0() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk4_X0(swigCPtr);
    return ret;
  }

  public bool isMtMk4_10() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk4_10(swigCPtr);
    return ret;
  }

  public bool isMtMk4_20() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk4_20(swigCPtr);
    return ret;
  }

  public bool isMtMk4_30() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk4_30(swigCPtr);
    return ret;
  }

  public bool isMtMk4_X00() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk4_X00(swigCPtr);
    return ret;
  }

  public bool isMtMk4_100() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk4_100(swigCPtr);
    return ret;
  }

  public bool isMtMk4_200() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk4_200(swigCPtr);
    return ret;
  }

  public bool isMtMk4_300() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk4_300(swigCPtr);
    return ret;
  }

  public bool isMtMk4_400() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk4_400(swigCPtr);
    return ret;
  }

  public bool isMtMk4_500() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk4_500(swigCPtr);
    return ret;
  }

  public bool isMtMk4_600() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk4_600(swigCPtr);
    return ret;
  }

  public bool isMtMk4_700() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk4_700(swigCPtr);
    return ret;
  }

  public bool isMtMk4_710() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk4_710(swigCPtr);
    return ret;
  }

  public bool isMtMk4_800() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk4_800(swigCPtr);
    return ret;
  }

  public bool isMtMk4_900() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk4_900(swigCPtr);
    return ret;
  }

  public bool isMtMk5() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk5(swigCPtr);
    return ret;
  }

  public bool isMtMk5_X0() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk5_X0(swigCPtr);
    return ret;
  }

  public bool isMtMk5_10() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk5_10(swigCPtr);
    return ret;
  }

  public bool isMtMk5_20() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk5_20(swigCPtr);
    return ret;
  }

  public bool isMtMk5_30() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk5_30(swigCPtr);
    return ret;
  }

  public bool isMtMk5_X00() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk5_X00(swigCPtr);
    return ret;
  }

  public bool isMtMk5_100() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk5_100(swigCPtr);
    return ret;
  }

  public bool isMtMk5_200() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk5_200(swigCPtr);
    return ret;
  }

  public bool isMtMk5_300() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk5_300(swigCPtr);
    return ret;
  }

  public bool isMtMk5_710() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceId_isMtMk5_710(swigCPtr);
    return ret;
  }

}

}
